# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D1fnJi6gj_4EXviyWnPtpDLnM1vqTQRv
"""

print('hello world')  #bu benim

print("hello")
print("clarusway")



print(print.__doc__)

print(map.__doc__)

print(sum.__doc__)

print(input.__doc__)

x = 3
y = 4.1
z = 7
print(x+y+z)

x = 33
y = 30
x = y
print(x)

# Commented out IPython magic to ensure Python compatibility.
# %50 = 3

name = t

gol = ev

gıl = 1

isim = ahmet

isim = "ahmet"

sorted(["ahmet", "mehmet", "ceylan", "seyhan"])

isimler = ["ahmet", "mehmet", "ceylan", "seyhan"]

isimler

sorted(isimler)

sehirler = ["tokyo", "addis ababa", "rome", "istanbul", "rio"]

sehirler

sorted(sehirler)

print(sorted(sehirler, key=len, reverse=True))

sehirler.sort(key = len, reverse = True)

sehirler

import sys

x = [1,2,3]
y = (1,2,3)

print(sys.getsizeof(x))
print(sys.getsizeof(y))

benim = ["a", "b", "c"]

ben_tuple = tuple(benim)
ben_tuple

my_tuple = ("Solar")
print(my_tuple, type(my_tuple), sep="\n")

x = 1, 2, 3

type(x)

y = 1

y2 = 1

type(y)

type(y2)

aa = "a,", "b", "c"

aa

bb = "aa"

type(bb)

cc = "aa",
cc

range(1,11)

range

print(range)

tuple(range(1,11))

number = tuple(range(1,11))

number

first_dic = {1 : "one", "two" : 2, False : [1, 2, 3], 1.5 : ("one", "two"), (1,2) : "clrswy"}
first_dic

xx = dict(bir = "one", iki = "two")

xx

sehir = "istanbul"
sehir1 = "ankara"
nüfus = 1000

sehirler = {1 : sehir, 2 : sehir1, 'nüfusum' : 1000}
sehirler

sehirler[2]

sehirler['nüfusum']

family = dict(name1 = "Yavuz", name2 = "Büşra", name3 = "Vera", name4 = "Portakal")

family

print(list(family.items()), "\n")
print(list(family.keys()), "\n")
print(list(family.values()))

family.update({"a" : 1, "b" : 2})

family

del family['a']

family

del family['name1'], family['name2']

family

"name1" in family

family

"name5" in family

"name5" not in family

school_records={
    "personal_info":
        {"kid":{"tom": {"class": "intermediate", "age": 10},
                "sue": {"class": "elementary", "age": 8}
               },
         "teen":{"joseph":{"class": "college", "age": 19},
                 "marry":{"class": "high school", "age": 16}
               },
        },
    "grades_info":
        {"kid":{"tom": {"math": 88, "speech": 69},
                "sue": {"math": 90, "speech": 81}
               },
         "teen":{"joseph":{"coding": 80, "math": 89},
                 "marry":{"coding": 70, "math": 96}
               },
        },
}

school_records["personal_info"]["teen"]["marry"]["age"]

school_records["grades_info"]["teen"]["joseph"]

list(school_records["grades_info"]["teen"]["joseph"].items())

friends = {
          "friend1" : {"first" : "Mahmut", "last" : "Bold"},
          "friend2" : {"first" : "Berkay", "last" : "Donk"}
}

friends

favourite ={ 
        "friends" : {
          "friend1" : {"first" : "Mahmut", "last" : "Bold"},
          "friend2" : {"first" : "Berkay", "last" : "Donk"}
           },
        "family" : {
          "family1" : {"first" : "Büşra", "last" : "Çilek"},
          "family2" : {"first" : "Vera", "last" : "Çİlek"}
            }
}

favourite

print(a - b)  # same as '.difference()' method
print(a.difference(b)) # a difference from b
print(a | b)  # same as '.union()' method
print(a.union(b)) # unification of a with b
print(a & b)  # same as '.intersection()' method
print(a.intersection(b)) # intersection of a and b

set_1 = {'red', 'blue', 'pink', 'red'}
colors = 'red', 'blue', 'pink', 'red'
set_1

set(colors)

letter = "a b c d e f g h i j k l m n o p r s t u v y z".split()

print(letter)

print(set(letter))

letter1 = " g h i j k l m n o p r s t u v y z a b c d e f".split()

print(letter1)

print(set(letter1))

test = {1, "bir", 1.0}
test

test = {1, "bir", 1.0}
len(test)

1 == 1.0

def most_frequent(List):
    return max(set(List), key = List.count)
List = [1, 3, 7, 4, 3, 0, 3, 6, 3]
print(most_frequent(List))

def most_common(L):
  # get an iterable of (item, iterable) pairs
  SL = sorted((x, i) for i, x in enumerate(L))
  # print 'SL:', SL
  groups = itertools.groupby(SL, key=operator.itemgetter(0))
  # auxiliary function to get "quality" for an item
  def _auxfun(g):
    item, iterable = g
    count = 0
    min_index = len(L)
    for _, where in iterable:
      count += 1
      min_index = min(min_index, where)
    # print 'item %r, count %r, minind %r' % (item, count, min_index)
    return count, -min_index
  # pick the highest-count/earliest item
  return max(groups, key=_auxfun)[0]
  print most_common(['goose', 'duck', 'duck', 'goose'])

from collections import Counter
numbers = [1, 3, 7, 4, 3, 0, 3, 6, 3] 
c = Counter(numbers)
print(c.most_common(1))

sales = {
  "cost_value": 31.87,
  "sell_value": 45.00,
  "inventory": 1000
}  
profit = (sales['sell_value'] - sales['cost_value']) * sales['inventory']
print(round(profit))
# the profit will be : 13130

payrolls = {
  "x": 3,
  "y": 29.99,
  "z": 4.1
}
payrolls['x'] = '$3.00'
payrolls['y'] = '$29.99'
payrolls['z'] = '$4.10'
payrolls

def comfortable_word(word):

    left = set(['q', 'w', 'e', 'r', 't', 'a', 's', 'd', 'f', 'g', 'z', 'x', 'c', 'v', 'b'])
    right = set(['y', 'u', 'i', 'o', 'p', 'h', 'j', 'k', 'l','n', 'm'])
    return ((set(word[::2]).issubset(right) and set(word[1::2]).issubset(left)) or set(word[::2]).issubset(left) and set(word[1::2]).issubset(right))

Left: q, w, e, r, t, a, s, d, f, g, z, x, c, v, b
Right: y, u, i, o, p, h, j, k, l, n, m
*/
const comfortable_word = word => {
  let right=['y', 'u', 'i', 'o', 'p', 'h', 'j','k', 'l', 'n', 'm'];
  let left=['q', 'w', 'e', 'r', 't', 'a', 's', 'd', 'f', 'g', 'z', 'x', 'c', 'v', 'b'];
  let arr=[];
  if (right.includes(word[0])){
  word.split('').map((v,i,a)=>{
  if (i%2===0){
    if (right.includes(v)){arr.push(true)}
    else{ arr.push(false)}}
  if (i%2!==0){
    if (left.includes(v)){arr.push(true)}
    else{ arr.push(false)}
  }})}
  if (left.includes(word[0])){
  word.split('').map((v,i,a)=>{
  if (i%2!==0){
    if (right.includes(v)){arr.push(true)}
    else{arr.push(false)}
  }
  if (i%2===0){
    if (left.includes(v)){arr.push(true)}
    else{ arr.push(false)}
  }})}
  return arr.every(v=>v===true)
};

# listelerde ve sözlüklerde de kullandığımız bir metod
# bu metod yardımı ile kopya çekebiliriz :)
# kümenin içini clear() ile temizlemiştik. şimdi yeniden öğe ekleyelim
küme = set(["bir", "iki", "üç", 1, 2, 3])
# Dikkat!!! Küme oluştururken add() metodunda yer alan immutable nesne sadece eklenebilir şartı yok.
# var olan kümeye add() ile mutable öğe ekleyemeyiz!!!
kopya_küme = küme.copy()
print(kopya_küme)

left_finger = set("asdfgqwertzxcvb")
print(left_finger)

sağ_el = set("jklşiuıopğühnymöç")
sol_el = set("qwertyasdfgzxcvb")
kelime = input("lütfen bir kelime giriniz")
kelime = set(kelime)  
if kelime.isdisjoint(sağ_el): 
    print("False")
elif kelime.isdisjoint(sol_el):
    print("False")
elif not kelime.isdisjoint(sağ_el) and not kelime.isdisjoint(sol_el):
    print("True")

sağ_el = set("jklşiuıopğühnymöç")
sol_el = set("qwertyasdfgzxcvb")
kelime = input("lütfen bir kelime giriniz:")
kelime = set(kelime)  
if kelime.isdisjoint(sağ_el): 
    print("False")
elif kelime.isdisjoint(sol_el):
    print("False")
elif not kelime.isdisjoint(sağ_el) and not kelime.isdisjoint(sol_el):
    print("True")

'j' in sağ_el

def function()

print(print.__doc__)

bos = set()
bos.

a = set('philadelphia')
b = set('dolphin')
print(a & b)

given_list = [1, 2, 3, 3, 3, 3, 4, 4, 5, 5]
set (given_list)

usa = set("Washington")
new_zeland = set("Wellington")
print(usa & new_zeland)
print(usa | new_zeland)
print(usa - new_zeland)
print(usa.intersection(new_zeland))
print(usa.union(new_zeland))
print(usa.difference(new_zeland))

print("hello")
print("hello")
print("hello")

if condition:
  body
  body2
body3

if True:
  print("it is true")

if False:
  print("it is true")

if 1:
  print("ben")

if False or True:
  print("ben")

minced = True
bread = True
#green
lettuce = True
pepper = False
store = True

hamburger = (minced and store and bread) and (lettuce or pepper)

if hamburger:
  print("Bon Apetite")

1 == 1.0

a = set("TWELVE PLUS ONE")
b = set("ELEVEN PLUS TWO")
a==b

print(a==b)

şifre = input("Şifreyi biliyor musun?:").title().strip() == "Yes"
print("You entered:", şifre)

a = int(input("bir sayı giriniz: "))
if a % 2 == 0:
  print("{} bir çift sayı".format(a))
else:
  print("{} bir tek sayı".format(a))

a = int(input("bir sayı giriniz: "))
if a > 0:
  print("{} pozitiftir".format(a))
else:
  print("{} negatiftir".format(a))

a = int(input("1.sayıyı gir:"))
b = int(input("2.sayıyı gir:"))
if a > b:
  print("{} sayısı {} sayısından büyüktür".format(a, b))
else:
  print("{} sayısı {} sayısından büyüktür".format(b, a))

bool_value = True
if bool_value :
  print("Yes")
else:
  print("No")

L1 = []
L1.append([1, [2,3], 4])

L1

L1.extend([7, 8, 9])

L1

num1 = float(input("Enter the first number : "))
num2 = float(input("Enter the second number : "))
num3 = float(input("Enter the third number : "))
if (num1 > num2) and (num1 > num3) :
  largest = num1
elif (num2 > num1) and (num2 > num3) :
  largest = num2
else:
  largest = num3
  print("the largest number is :", largest
        )

num = float(input("bir sayı gir"))
if num > 0:
  print("positive number")
elif num ==0:
   print("zero") 
else:
  print("negative number")

score = int(input("Score"))
if score >= 90 :
  if score >= 95 :
    degree = "A+"
  else :
    degree = "A"
elif score >= 80 :
  if score >= 85 :
    degree = "B+"
  else :
    degree = "B"
else :
  degree = "B-"
print("Your degree is:", degree)

while 0 :
  print("bir")
print(2)

while [] :
  print("while")
print("outside while")

bool(None)

while None :
  print("None")
print("outside")

number = 0
while number < 6:
  print(number)
  number += 1
print('now, number is bigger or equal to 6')

age = input("Enter your age:")
while not age.isdigit() :
  print("You entered incorrectly!")
  age = input("Enter your age correctly please :")
print("Great! You entered valid age :", age)

"onaltı".isdigit()

"16.0".isdigit()

"41".isdigit()

answer = 28
question = 'What a two-digit number am I thinking of?'
print ("Let's play the guessing game!")
while True:
  guess = int(input(question))

  if guess < answer:
    print('Little higher')
  elif guess > answer:
    print('Little lower')
  else: # guess == answer
    print('Are ypu a MINDREADER!!!')
    break

while True :
  print("bir kere yazdır")
  break

### The most frequent number

numbers = [-1, 3, 7, 4, 3, 0, 3, 16, 3, 7, 0, 0, 1]

max(1,2,3)

empty = []
max(empty, default = True)

empty = ()
max(empty, default = "boş")

sequence = [1,1,1,1,2,2,2,3,3,4]
max(sequence)

sequence.count(4)

sequence.count(3)

sequence.count(1)

numbers = [-1, 3, 7, 4, 3, 0, 3, 16, 3, 7, 0, 0, 1]

max(numbers)

numbers.count(16)

numbers.count(3)

numbers = [-1, "3", 7, 4, "3", 0, "3", 16, "3", 7, 0, 0, 1]

numbers.count("3")

numbers = [-1, 3, 7, 4, 3, 0, 3, 16, 3, 7, 0, 0, 1]

max(numbers, key = numbers.count)

item = max(numbers, key = numbers.count)
numbers.count(item)

numbers.count(max(numbers, key = numbers.count))

### Comfortable words

left = set("qwertasdfgzxcvb")
right = set("yuiophjklmn")

left

right

word = set("clarusway")

word

leftcheck = (word.intersection(left))
rightcheck = (word.intersection(right))

leftcheck

rightcheck

leftcheck = bool(word.intersection(left))
rightcheck = bool(word.intersection(right))

leftcheck

print(leftcheck and rightcheck)

word2 = set("asar")

word2

leftcheck = bool(word2.intersection(left))
rightcheck = bool(word2.intersection(right))

leftcheck and rightcheck



sentence = input("give me a sentence :")
words = sentence.split()
i = 0
longest = 0
while i < len(words) :
  if len(words[i]) > longest :
    longest = len(words[i])
  i += 1
print("the lenght og the longest word is :", longest)

"ben bir cümle girmiş olayım".split()

names = [“Ahmed”, “Aisha”, “Adam”, “Joseph”, “Gabriel”]
for i in names:
  print("Hello", i)

sayılar = []
for i in range(1,6) :
  sayılar.append(i)

sayılar

for i in range(1,6) :
  print(i)

eleman = "ahmet -, clarusway[]"

for i in eleman :
  print(i, end = "//")

kelime = input("kelime gir:")
count = 0
for i in kelime:
  count += 1
  if count < len(kelime):
    i = i + "-"
  print(i, end = "")

word = "clarusway"
a = "-".join(word)
print(a)

### Samanlıkta iğne arayalım mı?

samanlık = ["yumurta", "yaba", "inek", "iğne", "saman", "tezek", "tırmık"]

print(f"iğne {samanlık.index('iğne')} numaralı indexte")

###'Tuple' kullanarak çoklu değer assign etmek

v = ("five", 5, True)
(x, y, z) = v
print(x, y, z)

(monday, tuesday, wednesday, thursday, friday, saturday, sunday) = tuple(range(1,8))

sunday

print([1, 2, 3, 4] + ["11", "22", 33])

tt = (1,2, [1,3,5])

tt[2].append(4)

tt

x, y = (10, 20)

print(x)
print(y)

a, _, b, _ = (10, 20, 30, 40)

print(a, b)

x, y, *z = (11, 22, 33, 44, 55, 66)

print(x)

print(y)

print(z)

x, y, *_ = (11, 22, 33, 44, 55, 66)

x, y, *z, t =(11, 22, 33, 44, 55, 66, 77)

print(t)

x, y, *_, t, w = (11, 22, 33, 44, 55, 66, 77, 88)

print(t)

isimler = {"ali" : 33,
           "veli" : 44,
           "ayşe" : 2
           }

for a, b in isimler.items():

isimler.items()

for a, b in isimler.items():

sayı = int(input("çarpacağın sayı gir 1-10:"))
for i in range(11):
  print("{}x{} = ".format(sayı, i), sayı * i)

seq = range(5)

for i in seq:
  print(i)

print(list(seq))

print(tuple(seq))

print(*seq)

seq

a = set(range(0,10))
print(a)

print(* "separate")

isimler= ["tarık", "sevda", "selim"]
yaşlar= [11, 22, 33]

zip(isimler, yaşlar)

tuple(zip(isimler, yaşlar))

xx = zip(isimler, yaşlar)

print(list(xx))

for isimler, yaşlar in xx :
  print(isimler, yaşlar)

saved_amount = int(input('Please enter your saved amount: '))
ps4_price = 200
if saved_amount <= ps4_price/2:
  print("You must save more, keep saving!")
elif saved_amount >= ps4_price:
  print("Yippee! You can buy your PS4")
else:
  saved_amount >= ps4_price/2
  print("You saved more than half, keep saving!")

math_mark = int(input('Please enter the mark: '))
if math_mark >= 85:
  print("A (Excellent)")
elif math_mark >=70:
  print("B (Good)")
elif math_mark >= 60:
  print("C (Medium)")
elif math_mark >= 45:
  print("D (Not Bad")
else:
  print("F (Failed)")

sample_list = [{"section":5, "topic":2}, 'clarusway', [1, 4], 2020, 3.14, 1+618j, False, (10, 20)]
for i in sample_list:
  print("The type of", i, "is", type(i))

weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']
for day in range(len(weekdays)):
  print('Day', day+1, ':', weekdays[day])

range(len(weekdays))

number = int(input('Please enter a number: '))

count = 0

while count < number:
    print(count**2)
    count += 1

name = input("enter your name:")
if name == "Joseph":
  print("Hello, name! The password is : W@12")
else:
  print("Hello, name! See you later.")

age = (input("Are you a cigarette addict older than 75 years old?(Yes/No)"))
chronic = (input("Do you have a severe chronic disease?(Yes/No)"))
immune = (input("Is your immune system too weak?(Yes/No)"))
age = age.lower()
chronic = chronic.lower()
immune = immune.lower()
if age == "yes":
  age = True
else:
  age = False
if chronic == "yes":
  chronic = True
else:
  chronic = False
if immune == "yes":
  immune = True
else:
  immune = False
risk = age or chronic or immune
print("Risk:", risk)

age = (input("Are you a cigarette addict older than 75 years old?(Yes/No):"))
age = age.lower()
print(age)

age = (input("Are you a cigarette addict older than 75 years old?(Yes/No)"))
age = age.lower()
if age == "yes":
  age = True
else:
  age = False
print(age)

age = input("Are you a cigarette addict older than 75 years old? Y/N:")
if age == "N":
  age = False
elif age == "n":
  age = False
else:
  age = True
chronic = input("Do you have a severe chronic disease? Y/N:")
if chronic == "N":
  chronic = False
elif chronic == "n":
  chronic = False
else:
  chronic = True
immune = input("Is your immune system too weak? Y/N:")
if immune == "N":
  immune = False
elif immune == "n":
  immune = False
else:
  immune = True
risk = age or chronic or immune
print("risk =", risk)

a = int(input("How many number "))
values = []
i = 1
while i<=a:
  values.append(input("value "))
  i+=1
print("The largest number is:", sorted(values)[a-1])



sentence = input("give me a sentence :")
words = sentence.split()
i = 0
longest = 0
while i < len(words) :
  if len(words[i]) > longest :
    longest = len(words[i])
  i += 1
print("the lenght og the longest word is :", longest)

values = [4, 2, 3, 1]
print(sorted(values))

liste=["eat", "tea", "tan", "ate", "nat", "bat"]
sorted_list=[]
sonuc=[]
for i in liste:
  if sorted(i) not in sorted_list:
    sorted_list.append(sorted(i))
for a in range(len(sorted_list)):
  sonuc.append([i for i in liste if sorted(i)==sorted_list[a]])
print(sonuc)

liste=["eat", "tea", "tan", "ate", "nat", "bat"]
sorted_list=[]
sonuc=[]
for i in liste:
  print(i)

liste=["eat", "tea", "tan", "ate", "nat", "bat"]
sorted_list=[]
sonuc=[]
for i in liste:
  print(sorted(i))

liste=["eat", "tea", "tan", "ate", "nat", "bat"]
sorted_list=[]
sonuc=[]
for i in liste:
  if sorted(i) not in sorted_list:
    sorted_list.append(sorted(i))
    print(sorted_list)

liste=["eat", "tea", "tan", "ate", "nat", "bat"]
sorted_list=[]
sonuc=[]
for i in liste:
  if sorted(i) not in sorted_list:
    sorted_list.append(sorted(i))
for a in range(len(sorted_list)):
  sonuc.append([i for i in liste if sorted(i)==sorted_list[a]])
print(sonuc)

strs = ["eat", "tea", "tan", "ate", "nat", "bat", "cat", "tac"]
list_c = []
list_n = []
list_b = []
list_e = []
for i in strs:
  for j in i:
    if j == "c":
      list_c.append(i)     
for i in strs:
   for j in i:
     if j == "n":
       list_n.append(i)
for i in strs:
   for j in i:
     if j == "b":
       list_b.append(i)  
for i in strs:
   for j in i:
     if j == "e":
       list_e.append(i) 
last_list = [list_e, list_n, list_b, list_c]
print(last_list)

# [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat'], ['cat', 'tac']]

# -*- coding: utf-8 -*-
"""
Created on Sat Apr 17 19:05:41 2021
@author: Joseph Forest
"""
arr = list()
while True:
    users = input("Type 'ok' when you are done: ")
    if users == "ok":
        break
    else:
        arr.append(int(users))
n = len(arr)     
# To store the maximum water
# that can be stored
res = 0
print("bloklar", arr)
olasılık = [] # su tutma olasılığı olan blocklar
# For every element of the array
for i in range(1, n - 1) :
    
      
    # Find the maximum element on its left
    left = arr[i] 
    for j in range(i) : 
        left = max(left, arr[j])
         
        # Find the maximum element on its right
        right = arr[i]
         
        for j in range(i + 1 , n) :
            right = max(right, arr[j])
             
        # Update the maximum water
res = res + (min(left, right) - arr[i])
print()
print()
print(res)

# -*- coding: utf-8 -*-
"""
Created on Sat Apr 17 19:05:41 2021
@author: Joseph Forest
"""
arr = list()
while True:
    users = input("Type 'ok' when you are done: ")
    if users == "ok":
        break
    else:
        arr.append(int(users))
n = len(arr)
# To store the maximum water
# that can be stored
res = 0
print("bloklar", arr)
olasılık = [] # su tutma olasılığı olan blocklar
# For every element of the array
for i in range(1, n - 1) :
    # Find the maximum element on its left
    left = arr[i]
    for j in range(i) :
        left = max(left, arr[j])
        # Find the maximum element on its right
        right = arr[i]
        for j in range(i + 1 , n) :
            right = max(right, arr[j])
        # Update the maximum water
res = res + (min(left, right) - arr[i])
print()
print()
print(res)

5sayi = int(input("sayi giriniz:"))
n = 0
for i in sayi:
  print(sayi)

text = ['one','two','three','four','five']
numbers = [1, 2, 3, 4, 5]
city = ["Tokyo", "Kiev", "Mekke", "İstanbul", "Washington"]

print(zip(text, numbers))

list(zip(text, numbers))

print(*zip(text, numbers))

print(* zip(text, numbers, city))

range(0,10)

print(range)

evens = []
odd = []
for n in range(10):
  if n%2 == 0 :
    evens.append(n)
  else:
    odd.append(n)
print(evens)
print(odd)

numbers = [11, 36, 33, 66, 89, 21, 32, 16, 10]
evens = 0
odds= 0
for i in numbers:
  if not i%2:
    evens += 1
  else:
    odds +=1
print("The number of even numbers:", evens)
print("The number of odd numbers:", odds)

numbers = range(1,10)
for i in numbers:
  print(str(i)*i)

toplam = 0
for i in range(1,75):
  toplam = toplam + i
print(toplam)

names = ["susan", "tom", "edward"] 
mood = ["happy", "sad"]
for i in names:
  for ii in mood:
    print(i + " is " + ii)

my_list = [1, 2, 3, 4, 5, 6]
new_list = []

for i in my_list :
  if i % 2 :
    new_list.append(i ** 2)
new_list

boş = []

boş.append(my_list[0] ** 2)
boş

boş.append(my_list[2] ** 2)
boş

boş.append(my_list[4] ** 2)
boş

# [expression for item in iterable]

[i for i in range(5)]

for i in range(5):
 print(i)

[i**2 for i in range(5)]

listem = []
for i in range(5):
  listem.append(i)
listem

condition = True
if condition :
  a = 1
else :
  a = 0
print(a)

# ternary 'if' contidition yapısı

execute-body1 if condition else execute-body2

print(1 if 2 < 4 else 0)

a = 1 if 2 < 4 else 0
print(a)

my_list = [1, 2, 3, 4, 5, 6]
[i ** 2 for i in my_list if i%2 ]

a = [i ** 2 for i in my_list if i%2 ]
a

a = (i ** 2 for i in my_list if i%2)

a

print(*a)

for i in a:
  print(i)

a = (i ** 2 for i in my_list)
print(next(a))

print(next(a))

print(next(a))

print(next(a))

print(next(a))

print(next(a))

print(next(a))

college_years = ['Freshman', 'Sophomore', 'Junior', 'Senior']
  return list(enumerate(college_years, 2019))
print(college_years)

def amstrong_number():
    for i in range(0,1):
        sayi=int(input("Lütfen bir sayı giriniz : "))
        if sayi<=0:
            print("pozitif bir sayı giriniz.")
            break
        elif sayi>0:
            basamak=len(str(sayi))
            if basamak==1:
                print("Tek basamklı sayı giremessiniz.")
                break
            elif basamak>1:
                toplam=0
                for i in str(sayi):
                    toplam=toplam+(int(i)**basamak)
                print(f"sayıların rakamlara ayırıp basamak sayısı kadar üssünü alıp toplayınca çıkan sonuç = {toplam}")
                if toplam==sayi:
                    print(f"Girilen sayi = {sayi} bir amstrong sayısıdır.")
                elif toplam!=sayi:
                    print(f"Girilen sayi = {sayi} bir amstrong sayısı değildir.")

while True:
    num = input("Please enter a positive integer number : ")
    if num.isdigit() :
        a = num.split()
        b=0
        for i in range(len(a[0])) :
            b+=int(a[0][i])**len(a[0])
        if b==int(num):
            print(num, "is an Armstrong number")
        else:
            print(num, "is not an Armstrong number")
        break
    else:
        print("It is an invalid entry. Don't use non-numeric, float, or negative values!")

while True:
  num = input("Please enter a positive integer number : ")
  if num.isdigit():
    b = 0
    a = num.split()
    for i in range(len(a[0])):
    if:
    else:
      print(num, "is not an Armstrong number")
  else:
    print("It is an invalid entry. Don't use non-numeric, float, or negative values!")

num = 671
a = num.split()
range(len(a[0]))
print(* range(len(a[0])))

listem = [None, "0", "istanbul", ()]

filtered = filter(None, listem)

filtered

print(* filtered)

for i in filtered :
  print(i)

enum = enumerate(listem)

type(enum)

enum

print(* enum)

min ("ahmet")

max ("ahmet")

ord("a")

ord("t")

sum([1,2,3,4,5])

def multiply(a, b) :
  print(a * b)

multiply("amazing ", 3)

def add(a, b):
  print(a+b)

add(-3, 5)

def calculator(a, b, c):
  if c == "+":
    print(a+b)
  elif c == "-":
    print(a-b)
  elif c == "*":
    print(a*b)
  elif c == "/":
    print(a/b)
  else:
    print("Enter valid arguments")

calculator(12, 3, "/")

def mul(x, y) :
  return x+y

aa= mul(2,5)
print(aa)

print(type(print("hello")))

print(type(10*5))

def string() :
  return "ahmet"

print(string())

type(string())

def integer() :
  return 15

print(integer())

type(integer())

def boolean() :
  return True

type(boolean())

print(boolean())

if boolean():
  print("ben çalıştım")
else :
  print("beni rahatsız etmeyesen")

def listem() :
  return [1,2,3,4,5]

print(listem())

for i in listem() :
  print(i)

tuple(listem())

tuple([1,2,3,4,5])

def calculator(a, b, c):
  if c == "+":
    return(a+b)
  elif c == "-":
    return(a-b)
  elif c == "*":
    return(a*b)
  elif c == "/":
    return(a/b)
  else:
    return("Enter valid arguments")

### Armstrong Number

while True :
  number = input("enter a positive number:")
  digits = len(number)
  summ = 0
  if not number.isdigit() :
    print(number, "is invalid entry enter numberic value!")
  elif int(number) >= 0 :
    for i in range(digits) :
      summ = summ + int(number[i]) ** digits
    if summ == int(number) :
      print(number, "is an Armstrong Number")
      break
    else :
      print(number, "is not an Armstrong Number")
      break

### Prime Number

n = int(input("Enter a number to check if it is a prime number."))
count = 0
for i in range(1, n+1) :
  if n % i == 0 :
    count += 1
if (n == 0 or (n == 1)) or (count >=3) :
  print(n, "is not a prime number")
else:
  print(n, "is a prime number")

def listem():
  return ["hello"]
listem()

filter()

def filterVowels(letter) :
  vowels = ["a", "e", "i", "o", "u"]

  if letter.lower() in vowels :
    return True
  else :
    return False

vowels = ["a", "e", "i", "o", "u"]

"b" in vowels

"a" in vowels

filterVowels("b")

filterVowels("U")

sentence = "the clarusway is the best."

filtered_vowels = filter(filterVowels, sentence)

print(*filtered_vowels)

def absolute(a):
  if a > 0:
    return a
  else: 
    return -a

absolute(-2)

def texter(x, y, z):
  return (x, y, z)
a = "i"
b = "love"
c = "you"
print(a, b ,c)

def concat(a, b) :
  print(a + b)

concat(a = "istanbul ", b = "erzurum")

concat(b = "erzurum", a = "istanbul ")

def default(a = "ali", b = 33) :
  print(a, "is", b, "years old.")

default()

default("mehmet", 44)

default("selvi")

default(b = 55)

def default(x, a=)

def parrot(voltage, state='a stiff', action='voom', typed='nörüyon'):
    print("-- This parrot wouldn't", action, end=' ')
    print("if you put", voltage, "volts through it.")
    print("-- Lovely plumage, the", type)
    print("-- It's", state, "!")

parrot(1000)

parrot(voltage = 10000000, action = "VOOOOOM")

def parrot(state='a stiff', voltage, action='voom', typed='nörüyon'):
    print("-- This parrot wouldn't", action, end=' ')
    print("if you put", voltage, "volts through it.")
    print("-- Lovely plumage, the", type)
    print("-- It's", state, "!")

def argu(a, c, b = "dünya", d = "satürn") :
  print(a, b, c, d, sep = "\n")

argu()

argu("uranus", "jüpiter")

argu(d = "güneş", a = "dünya", c = "pluto", b = "at")

if 10 > 0 :
  pass
  print("ben ikinci satırım")

def slicer(*num):
  evens = []
  odds = []
  for i in num:
    if not i % 2:
      evens.append(i)
    else:
      odds.append(i)
  print("even list:", evens)
  print("odd list:", odds)
slicer(1, 2, 3, 4, 5, 6, 7, 8, 9)

def slicer(*num)
  print("evens :", [i for i in num if i %2 == 0])
  print("odds :", [i for i in num if i %2 != 0])

sözlük = dict(ahmet = "bacanak", mehmet = "ağabey", ceyda = "baldız", meryem = "anne")

sözlük

def sözlük(**a) :
  for key, value in a.items() :
    print(key, value)

sözlük(ahmet = "bacanak", mehmet = "ağabey", ceyda = "baldız")

def organizer(**kwargs):
  list_name = []
  list_age = []
  for key, value in kwargs.items():
    list_name.append(key)
    list_age.append(value)
  print(list_name, list_age, sep="\n")

organizer(Beth = 26, Oscar = 42)

sözlük = dict(ahmet = "bacanak", mehmet = "ağabey", ceyda = "baldız", meryem = "anne")
a = sözlük.items()

print(a)

print(sözlük)

nterms = int(input("How many terms?:"))
n1, n2 = 1, 1
count = 0
fibonacci = []
if nterms <= 0 :
  print("Please enter a positive integer")
elif nterms == 1 :
  print("Fibonacci sequence upto",nterms,":")
  print(n1)
else:
  while count < nterms :
    fibonacci.append(n1)
    nn = n1 + n2
    n1 = n2
    n2 = nn
    
    count += 1
print(fibonacci)

def sum_double(x, y):
    if x != y :
        return x + y
    if x == y :
        return (x + y) * 2
print(sum_double(2, 2))

brackets = input("Write a string that contains only `(`, `)`, `{`, `}`, `[` and `]`:")
a = ["()"]
  if brackets in a:
    print(True)
  else:
    print(False)

def String(bracket) :
  string = ["()", "[]", "{}"]

  if bracket in string :
    return True
  else :
    return False

String("()")

def filterVowels(letter) :
  vowels = ["a", "e", "i", "o", "u"]

  if letter.lower() in vowels :
    return True
  else :
    return False

def characters(variable):
    string = ['()', '()[]{}', '{[]}', '''""''', '[]', '{}']
    if (variable in string):
        return True
    else:
        return False
  
  
# sequence
brackets = input("Write a string that contains only `(`, `)`, `{`, `}`, `[` and `]`:")
  
# using filter function
filter(characters, brackets)
  
characters(brackets)

a=input("Write a string that contains only `(`, `)`, `{`, `}`, `[` and `]`:")
b=[]
c=("{[()]}")
for i in a:
    if i in c:
        b.append(i)
x="".join(b)
left=set("{[(")
dict={"(" : ")", "[" : "]", "{" : "}"}
stack=[]
print(x)
for i in x:
    if i in left:
      
        stack.append(i)
    elif stack and i == dict[stack[-1]]:
            stack.pop()
    else:
        print(False)
if stack==[]:
    print(True)

a=input("Write a string that contains only `(`, `)`, `{`, `}`, `[` and `]`:")
b=[]
c=("{[()]}")
for i in a:
    if i in c:
        b.append(i)
x="".join(b)
left=set("{[(")
dict={"(" : ")", "[" : "]", "{" : "}"}
stack=[]
print(x)
for i in x:
    if i in left:
      stack.append(i)
    elif stack and i == dict[stack[-1]]:
            stack.pop()
stack

limit_number = int(input("Up to what number to find prime numbers:"))
prime_number = []
for num in range(1, (limit_number+1)):
  if num > 1:
    for i in range(2, num):
      if (num % i) == 0:
        break
    else:
      prime_number.append(num)
print(prime_number)

nterms = int(input("How many terms?:"))
n1, n2 = 1, 1
count = 0
fibonacci = []
if nterms <= 0 :
  print(nterms = int(input("please positive num:")))
elif nterms == 1 :
  print("Fibonacci sequence upto",nterms,":")
  print(n1)
else:
  while count < nterms :
    fibonacci.append(n1)
    nn = n1 + n2
    n1 = n2
    n2 = nn
    
    count += 1
 
print(fibonacci)

num = int(input("Print numbers from 1 to 100 inclusively:"))
numbers = []
for i in range(1, num+1) :
  if i % 15 == 0 :
    i = "FizzBuzz"
    numbers.append(i)
  elif i % 3 == 0 :
    i = "Fizz"
    numbers.append(i)
  elif i % 5 == 0 :
    i = "Buzz"
    numbers.append(i)
  else :
    numbers.append(i)
print(numbers)

genius = ("Bill", "Rossum", "Guido van", "Gates")

def merger(par1, par2, par3, par4) :
  print(f"For me, {par1} {par4} and {par3}{par2} are geniuses.")

merger(*genius)

def gene(x='Solomon', y='David'):  # defined by positional args
    print(x, "belongs to Generation X")
    print(y, "belongs to Generation Y")
dict_gene = {'y' : "Marry", 'x' : "Fred"}  #x, y her iki yerde de olmalı
gene(**dict_gene)

gene()

<img src="https://i.pinimg.com/originals/e6/87/61/e687614048a36165dd49b6fb18a12b5d.png" height= "100" width = "200" alt= "izdivac">

dict_couple = {"bride" : ["mary", "bella", "linda"],
               "groom" : ["rye", "fred", "roland"]}

def couples(bride, groom) :
  couple_list = []
  for x in zip(bride, groom) :
    couple_list.append(x)
  return couple_list

couples(**dict_couple)

def couples(bride, groom) :
  return [x for x in zip(bride, groom)]

couples(**dict_couple)

def meaner(ahmet, joseph, linda) :
  average = (ahmet + joseph + linda) / 3
  print("The average of their ages is :", average)

friends = {"ahmet" : 44, "joseph" : 39, "linda" : 55}

friends["ahmet"]

meaner(**friends)

string=input("Write a string that contains only `(`, `)`, `{`, `}`, `[` and `]`:")
while ("()" in string) or( "[]" in string)  or ("{}" in string) :
    string=string.replace("()","")
    string=string.replace("[]","")
    string=string.replace("{}","")
if len (string)== 0:
    print(True)
else:
    print(False)

def query(s):
    while "()" in s or "{}" in s or '[]' in s:
        s = s.replace("()", "").replace('{}', "").replace('[]', "")
    return s == ''
print(query(('()]')))

x = "([)]([)]"

def isValid(s) :
  while "()" in s or "{}" in s or "[]" in s:
    s = s.replace("()", "").replace("[]", "").replace("{}", "")
  return s == ""

isValid(x)

(lambda x : "odd" if x%2 else "even")(3)

(lambda x : "odd" if x%2 else "even")(10)

average = (lambda a, b : a**2 + b**2)(3, 5)

print(average)

iterable = "clarusway"
reverser = (lambda x : x[::-1])(iterable)

print(reverser)

for i in [1, 2, 3, 4, 5, 6]:
  print(i, ":", (lambda x : "odd" if x%2 != 0 else "even")(i))

hipotanüs = lambda a, b : a**2 + b**2

hipotanüs(3,5)

iterable = [1,2,3,4,5]

result = map(lambda x : x**2, iterable)

print(*result)

for i in result:
  print(i)

def karesinial(x) :
  return x**2

result = map(karesinial, iterable)

print(*result)

iterable_2 = ["ahmet", "mehmet ve kuzeni", "cemilin bacısı"]

result_2 = map(len, iterable_2)
print(*result_2)

letter1 = ["o", "s", "t", "t"]
letter2 = ["n", "i", "e", "w"]
letter3 = ["e", "x", "n", "o"]
numbers = map(lambda x, y, z : x+y+z, letter1, letter2, letter3)
print(list(numbers))

letter1 = ["a", "b", "c"]
letter2 = ["x", "y", "z"]
s = map(zip, letter1, letter2)
for i in s :
    for ii in i :
        print(ii)

def parrot_trouble(talking, hour):
  if talking == True and (hour<7 or hour>20):
            return True
  else:
            return False
print(parrot_trouble(True, 5))

def not_string(word):
  if 'not' in word:
    return(word)
  else:
    return('not '+word)
print(not_string('not sugar'))

(lambda x, y : (x+y)/2)(5,3)

num1 = [9, 6, 7, 4]
num2 = [3, 6, 5, 8]

numbers = map(lambda x, y : (x+y)/2, num1, num2)
print(* numbers)

words1=["you", "much", "hard"]
words2=["i", "you", "he"]
words3=["love", "ate", "works"]

sentence = map(lambda x, y, z : x + " " + y + " " + z, words2, words3, words1)

for i in sentence :
  print(i)

words1 = ["you", "much", "hard"]
words2 = ["i","you","he"]
words3 = ["love","ate","works"]
sentence = map(lambda x,y,z: x+" "+" "+y+" "+z,words2,words3,words1 )
print(* sentence)

first_ten = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
even = filter(lambda x:x%2==0, first_ten)
print(type(even))
print('even numbers are :', * even )

words = ['apple', 'swim', "clock", "me", "kiwi", "banana"]

for i in filter(lambda x : len(x) < 5, words):
  print(i)

def modular_function(n):
    return lambda x: x ** n
power_of_2 = modular_function(2)  # first sub-function derived from def
power_of_3 = modular_function(3)  # second sub-function derived from def
power_of_4 = modular_function(4)  # third sub-function derived from def
print(power_of_2(2))  # 2 to the power of 2
print(power_of_3(2))  # 2 to the power of 3
print(power_of_4(2))  # 2 to the power of 4

def functioner(n):
  return lambda x: str(x) + n
myPrint_smile = functioner(":)")
myPrint_sad = functioner(":(")
myPrint_neutral = functioner(":|")
print(myPrint_smile(55))
print(myPrint_sad("hello"))
print(myPrint_neutral("hello"))

def functioner(n):
  return lambda x: str(x) + n
myPrint_smile = functioner(":)")(55)
print(myPrint_smile)

def func_genereator(func_name):
  return lambda x: func_name(x)
yavuz_max = func_genereator(max)
yavuz_max([1,6,8,3,1])

import math

math.factorial()

import math as matematik

matematik.

math.e

matematik.factorial(5)

dir(math)

from math import pi, log10, factorial

print(pi)

print(log10(1000))

print(factorial(4))

matematik.factorial(4)

import string

string.punctuation

dir(string)

string.digits

import datetime

datetime.date

datetime.date.today

print(datetime.date.today())

from datetime.date import today

print(datetime.datetime.now())

from datetime import date

birt = date(571, 4, 22)

print(birt)

death = date(632, 6, 8)

date.toordinal(death) - date.toordinal(birt)

from random import choice

city = ["istanbul", "stockholm", "seul", "cape town"]
choice(city)

def missing_char(word, n):
  at = [word]
  print(at.remove('i'))
missing_char('kitchen', 1)

def missing_char(word, n):
  at = [word]
  print(at[0][n])
missing_char('kitchen', 1)

at = ['word', 'ats']
print(at[1])

colors = ['red', 'purple', 'blue', 'yellow', 'green']
print(colors[2])

fruit = 'Orange'

fruit[3]

fruit[2:5]

fruit[1:-1:2]

fruit[-1::-2]

print('galata' + 'saray')

print(4*'galatasaray')

print(3 * fruit)

fruit += 'apple'

fruit += 'lemon'

print(fruit)

sentence = 'i brush my %s %d times at %.2f' % ('teeth', 3, 9)

print(sentence)

title = "apologizing is a virtue"

print("%.5s" % title)

print('%(amount)d pounds of %(fruit)s left' % {'amount': 33, 'fruit': 'bananas'})

fruit = 'Orange'
vegetable = 'Spanich'
amount = 4
print('The amount of {} we bought is {} pounds'.format(fruit,amount))

print('{state} is the most {adjective} state of the {country}'.format(state='California', country='USA', adjective='crowded'))

print('{0} is the most {adjective} state of the {country}'.format('California', country='USA', adjective='crowded'))

print('{0} 0-{gsskor} {bizimtakım} şampiyon {1}'.format('Denizlispor', 'Galatasaray', gsskor = 7, bizimtakım = 'Galatasaray'))

print("{} {} {} {} {} {} {}".format('have', 6, 'months', 'a job', 'in', 'found', 'I will'))

print("{6} {0} {5} {3} {4} {1} {2}".format('have', 6, 'months', 'a job', 'in', 'found', 'I will'))

fruit = 'Orange'
vegetable = 'Tomato'
amount = 6
output = f"The amount of {fruit} and {vegetable} we bought are totally {amount} pounds"

print(output)

text = 'www.clarusway.com'
print(text.endswith('.com'))
print(text.startswith('http:'))

email = "clarusway@clarusway.com is my e-mail address"
print(email.startswith("@c", 9))
print(email.endswith("e-", 1, 32))

sentence = "I live and work in Virginia"

print(sentence.upper())
print(sentence.lower())
print(sentence.swapcase())
print(sentence.title())
print(sentence.replace("i", "+"))
print(sentence.capitalize())

print("Actions speaks louder than words".upper().swapcase().capitalize())

space_string = "     listen first      "
print(space_string.strip())

space_string = "     listen first      ".strip()
print(space_string)

source_string = "athırsızı"
print(source_string.strip("aı"))

source_string = "athırsızı"
print(source_string.lstrip("at"))

source_string = "athırsızı"
print(source_string.rstrip("ızı"))

source_string = "                   athırsızı               "

print(source_string.rstrip())

print(source_string.lstrip())

import streamlit

!pip install -q streamlit

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# 
# import streamlit as st
# import datetime
# 
# st.title("Bu benim ilk Aplikasyonum")
# st.write("Buradaki formu doldurmanız gerekiyor.")
# user_id = st.text_input("ID", value="Your ID", max_chars=7)
# info = st.text_area("Share some information about you", "Put information here",
#                     help='You can write about your hobbies or family')
# age = st.number_input("Age", min_value=18, max_value=100, step=1)

!wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip

!unzip ngrok-stable-linux-amd64.zip

get_ipython().system_raw('./ngrok http 8501 &')

!curl -s http://localhost:4040/api/tunnels | python3 -c \
    'import sys, json; print("Execute the next cell and the go to the following URL: " +json.load(sys.stdin)["tunnels"][0]["public_url"])'

!streamlit run /content/app.py

string_1 = 'I quit smoking'

new_list_1 = list(string_1)  # we created multi element list
print(new_list_1)

print(len(new_list_1))

new_list_2 = [string_1]  # this is a single element list
print(new_list_2)

new_list_2.append('Galatasaray')

print(new_list_2)

new_list_2.insert(1, 'ultraslan')

print(new_list_2)

new_list_2.remove('I quit smoking')

print(new_list_2)

new_list_2.sort()

print(new_list_2)

print(len(new_list_2))

print(new_list_2 * 3)

print(3 * new_list_2)

new_list_2[0] = 'GALATASARAY'

print(new_list_2)

new_list_2[4:6] = 'Gala'

print(new_list_2)

new_list_2[1:7] = 'ultrAslan'

print(new_list_2)

new_list_2.copy()

def front_back(word):
    word1 = list(word)
    word1[0], word1[-1] = word1[-1], word1[0]
    return "".join(word1)
front_back("clarusway")

leap_year = int(input("enter year:"))
if leap_year % 400 == 0 :
  print(leap_year, " is a leap year")
elif leap_year % 100 == 0 :
  print(leap_year, " is not a leap year")
elif leap_year % 4 == 0 :
  print(leap_year, " is a leap year")
else :
  print(leap_year, " is not a leap year")

mystring = 'banana'
number = mystring.count('a')
number

d = dict(itertools.izip_longest(*[iter(l)] * 2, fillvalue=""))

import itertools

sentence = "asfafda fdsfsdf"

sentence1 = list(sentence)
sentence2 = {w:sentence1.count(w) for w in sentence1}

sentence1

s = input("enter sentence:")

words = list(s)

stnc = {w:words.count(w) for w in words}
stnc

str = "this is string!"
dict = {}
for i in set(str):
    b = str.count(i, 0, len(str))
    dict[i] = b
print dict

def count_repeated_letter(string1):
    list1=[]

    for letter in string1:
        if string1.count(letter)>=2:
            if letter not in list1:
                list1.append(letter)


    for item in list1:
        if item!= " ":
            print(item,string1.count(item))


count_repeated_letter('letter has 1 e and 2 e and 1 t and two t')

def my_min(*x):
  for i in x :
    min(x)
  return (min(x))
print(my_min(5,6,7))

# Python program to find smallest
# number in a list
 
# list of numbers
list1 = [10, 20, 4, 45, 99]
 
# sorting the list
list1.sort()
 
# printing the first element
print("Smallest element is:", list1[:1])

empty_tuple = ()

print(type(empty_tuple))

try_tuple = ("love")

print(type(try_tuple))

try_tuple = ("love",)

print(type(try_tuple))

planet = 'mercury', 'jupiter', 'saturn'

print(planet)

print(type(planet))

empty_tuple_1 = tuple()

print(type(empty_tuple_1))

my_tuple = (1, 4, 3, 4, 5, 6, 7, 4)

my_list = list(my_tuple)

print(type(my_list))

my_tuple = tuple(my_list)

print(my_tuple)

print(type(my_tuple))

mountain = tuple('Alps')
print(mountain)

type(mountain)

mountain = ('Alps')
print(mountain)

type(mountain)

mix_value_tuple = (0, 'bird', 3.14, True)

print(len(mix_value_tuple))

mix_value_tuple[1]

mix_value_tuple[0] = 1

empty_dict_1 = {}

empty_dict_2 = dict()

print(type(empty_dict_1))

my_dict = {'key1' : 'value1',
           'key2' : 'value2',
           'key3' : 'value3'
           }

print(my_dict)

print(my_dict['key1'])

my_dict['key4'] = 'value4'

print(my_dict)

mix_keys = {22 : "integer",
            1.2 : "float",
            True : "boolean",
            "key" : "string"}

print(mix_keys)

mix_list = [0, 'bird', 3.14, True]

print(type(mix_list))

dict_by_dict = dict(animal = 'dog', planet = 'neptun', number = 40, pi = 3.14, is_good = True)

print(dict_by_dict)

print(dict_by_dict.items())

print(dict_by_dict.keys())

print(dict_by_dict.values())

dict_by_dict.update({'is_bad' : False})

print(dict_by_dict)

del dict_by_dict['animal']

print(dict_by_dict)

dict_by_dict['animal'] = 'at'

print(dict_by_dict)

print('pi' in dict_by_dict)

print('animal' not in dict_by_dict)

print('neptun' in dict_by_dict) # key de değil value de olduğu için False

school_records = {
     "personel_info":
        {"kid":
            {"tom":{"class": "intermediate", "age": 10},
             "sue":{"class": "elementary", "age": 8}
            },
         "teen":
            {"joseph":{"class": "college", "age": 19},
             "marry":{"class": "high school", "age": 16}
            }, 
        },
     "grades_info":
        {"kid":
            {"tom":{"math": 88, "speech": 69},
             "sue":{"math": 90, "speech": 81}
            },
         "teen":
            {"joseph":{"coding": 80, "math": 89},
             "marry":{"coding": 70, "math": 96}
            },  
        },
}

print(school_records)

print(school_records['personel_info']['teen']['marry']['age'])

empty_set = set()
print(type(empty_set))

colorset = {'purple', 'orange', 'red', 'darkblue', 'yellow', 'red'}
print(colorset)
print(colorset)

print(colorset)

s = set('unselfishness')
print(s)

a = set('abracadabra')
print(a)

b = set('alacazam')
print(a - b)
print(a.difference(b))

print(a | b)
print(a.union(b))

print(a & b)
print(a.intersection(b))

print(a.remove('c'))

a.remove('a')

print(a)

a.add('c')
print(a)

score = int(input("Enter your score :"))
if score >= 90:
  if score >= 95:
    Score_letter = "A+"
  else:
    Score_letter = "A"
elif score >= 80:
  if score >= 85:
    Score_letter = "B+"
  else:
    Score_letter = "B"
else:
  Score_letter = "below B"
print("Your degree: %s" % Score_letter)
print("Your degree:", Score_letter
      )

pwd

from upper_package import my_package1, my_package2

from upper_package.my_package1 import my_module_1, my_module_2

dir(my_package1)

from upper_package.my_package2 import my_module_3, my_module_4

dir(my_package2)

my_module_2.divide(10, 5)

my_module_1.addition(4,5)

my_module_3.repeater("clarusway", 3)

my_module_4.sqroot(25)

my_package1.__spec__

import upper_package

dir(upper_package)

from upper_package.my_package1.my_module_2 import divide, hello

hello()

divide(22, 11)

import math

from math import log10

log10(1000)

print(math.__doc__)

print(my_module_2.__doc__)

pip list

pip --version

pip install kaggle

pip show pip_tools

pip install pep8

pip show pep8

pip uninstall kaggle

log10(-1000)

printt()

log10('1000')

print("hello")
print(4/0)

while True :
  a = int(input("ilk sayı :"))
  b = int(input("ikinci sayı :"))
  c = a / b
  print(c)
  break

while True :
  a = int(input("ilk sayı :"))
  b = int(input("ikinci sayı :"))
  try:
    c = a / b
    print(c)
    break
  except :
    print("bir şeyler ters gitti.")

try : 
  print("4" + 4)
except :
  print("muhtemelen yanlış birşeyler yaptın.")

try : 
  print("4" + "4")
except :
  print("muhtemelen yanlış birşeyler yaptın.")

while True :
  a = int(input("ilk sayı :"))
  b = int(input("ikinci sayı :"))
  try:
    c = a / b
    print(c)
    break
  except ZeroDivisionError:
    print("sıfıra bölünememe kuralını hatırla. ikinci sayıyı sıfır girme lütfen")

try : 
  print("4" + "4")
except TypeError:
  print("type hatası var. tipi kontrol etsen iyi olur.")
else:
  print("aaa demek ki exception yükselmemiş. mmmm. super.")
finally:
  print("eh nihayet bana sıra geldi. ben çalıştım.")

try : 
  print("4" + 4)
except TypeError:
  print("type hatası var. tipi kontrol etsen iyi olur.")
else:
  print("aaa demek ki exception yükselmemiş. mmmm. super.")
finally:
  print("eh nihayet bana sıra geldi. ben çalıştım.")

try : 
  print("4" + 4)
except ValueError:
  print("type hatası var. tipi kontrol etsen iyi olur.")
else:
  print("aaa demek ki exception yükselmemiş. mmmm. super.")
finally:
  print("eh nihayet bana sıra geldi. ben çalıştım.")

try :
  isim = input("isminiz :")
  print(v)
except Exception as hatam :
  print(hatam)
  print(type(hatam))

def my_sum(*x):
  for i in x:
    x += x
    return x
print(my_sum(9, 1, 3, 0, -1))

fruits = ["banana", "mango", "pear", "apple", "kiwi", "grape"]

count = 3
while count > 0 :
  try :
    index = int(input("favori meyve indexini girer misin?:"))
    print("Benim favori meyvem {}'dir.".format(fruits[index]))
  except IndexError :
    count -= 1
    print(f"Böyle bir index bulunmamaktadır. {count} adet giriş hakknız kaldı. Doğru giriş yapınız.") 
  except ValueError :
    count -= 1
    print(f"Integer yani numeric bir değer giriniz. {count} adet giriş hakknız kaldı. Tekrar giriş yapınız.")
  else :
    print("Tebrikler. Doğru giriş yaptınız.")
    break
  finally :
    print("Meyvelerim tazedir. Afiyet olsun")

pwd

sea = open("fishes.txt", "r")

print(sea.read())
sea.close()

sea = open("fishes.txt", "r")

print(sea.read(33))
sea.close()

sea = open("fishes.txt", "r")

print(sea.read(33))
print(sea.read(33))  # kaldığı yerden devam ediyor
sea.close()

sea = open("fishes.txt", "r")

print(sea.read(33))
print(sea.read(33))
sea.seek(0)
print(sea.read(33)) #curser ı istediğin yere çekmeni sağlıyor
sea.close()

sea = open("fishes.txt", "r")

print(sea.read(33))
print(sea.read(33))
sea.seek(0)
print(sea.read(33)) 
print(sea.tell()) # curser ın nerede kaldığını söylüyor
sea.close()

rumi = open("rumi.txt", "r")

print(rumi.read(35))
print(rumi.read(13))
print(rumi.tell())
rumi.seek(15)
print(rumi.read(20))
rumi.close()

sea = open("fishes.txt", "r")

print(sea.readline())
sea.close()

sea = open("fishes.txt", "r")

print(sea.readline())
print(sea.readline())
print(sea.readline())
print(sea.readline())
sea.close()

sea = open("fishes.txt", "r")

print(sea.readline(13))
print(sea.readline(13))
print(sea.readline(13))
print(sea.readline(13))
sea.close()

sea = open("fishes.txt", "r")

print(sea.readline(13))
print(sea.readline(13))
print(sea.readline())
print(sea.readline(13))
sea.close()

rumi = open("rumi.txt", "r")

print(rumi.readline())
print(rumi.readline())
print(rumi.readline(19))

rumi.close()

sea = open("fishes.txt", "r")

print(sea.readlines())
sea.close()

sea = open("fishes.txt", "r")
print(sea.readline())
print(sea.readlines())
sea.close()

rumi = open("rumi.txt", "r")

print(rumi.readlines())


rumi.close()

rumi = open("rumi.txt", "r")

for line in rumi:
  print(line)


rumi.close()

rumi = open("rumi.txt", "r")

for line in rumi.readlines():
  print(line)


rumi.close()

with open("fishes.txt", "r") as sea :
  print(sea.read())

with open("fishes.txt", "r") as sea :
  print(sea.read(33))
  print(sea.read(33))
  sea.seek(0)
  print(sea.read(33)) 
  print(sea.tell())

with open ("at.txt", "w", encoding = "utf-8") as dosyam :
    dosyam.write("bu benim ilk satırım.")

with open("fruits.txt", "w", encoding = "utf-8") as file :
  for meyve in fruits :
    file.write(meyve + "\n")

def my_sum(*x):
  #numbers = []
  for i in x:
    #numbers.append(x)


    return x
print(my_sum(9, 1, 3, 0, -1))

def my_sum(*x) :
    numbers = []
    for i in x :
        
        numbers.append(i)
        Sum = sum(numbers)
    return Sum
        
print(my_sum(9, 1, 3, 0, -1))

def my_fact(n):
  if n == 0 :
    print("The factorial of 0 is 1")
  elif n < 0 :
    print("Sorry, factorial does not exist for negative numbers")

  else :
    fac = 1
    for i in range(1, n + 1) :
      
      fac = fac*i
    return fac
print(my_fact(5))

fruits = ['Banana', 'Orange', 'Apple', 'Strawberry', 'Cherry']

with open("fruits_24.txt", "w", encoding="utf8") as ff :
  for meyve in fruits :
    ff.write(meyve + "\n")

with open("fruits_24.txt", "r", encoding="utf8") as ff :
  print(ff.read())

flowers = ['Jasmine', 'Rose', 'Lily', 'Daisy', 'Tulip']

with open("flowers_24.txt", "w", encoding="utf8") as ff :
  for meyve in flowers :
    ff.write(meyve + "\n\n")

with open("flowers_24.txt", "r", encoding="utf8") as ff :
  print(ff.read())

flowers = ['Jasmine\n', 'Rose\n', 'Lily\n', 'Daisy\n', 'Tulip\n']

with open("flowers_24.txt", "w", encoding="utf8") as ff :
    ff.writelines(flowers)

with open("flowers_24.txt", "r", encoding="utf8") as ff :
  print(ff.read())

with open("fruits_24.txt", "a", encoding="utf8") as ff :
    ff.write("melon")

with open("fruits_24.txt", "r", encoding="utf8") as ff :
  print(ff.read())

pwd

with open("istiklal.txt", "r", encoding="utf8") as ff :
    print(ff.read())

with open("istiklal.txt", "r", encoding="utf8") as ff :
    lines = ff.readlines()

lines

counter = 0
with open("istiklal.txt", "w", encoding = "utf8") as f:

  for i in lines:
    counter +=1
    if counter %4 == 0 :
      f.write(i + "\n")
    else :
      f.write(i)
with open("istiklal.txt", "r", encoding="utf8") as f :
    print(f.read())

with open("istiklal.txt", "r", encoding="utf8") as ff :
    new_lines = ff.readlines()
new_lines

with open("istiklal.txt", "a", encoding = "utf8") as f:
  f.write("\n")

  for i in new_lines :
    if i == "\n" :
      i.replace("\n", "")
    else:
      f.write(i)
with open("istiklal.txt", "r", encoding="utf8") as f :
    print(f.read())

!pip install -q streamlit

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# 
# import streamlit as st
# 
# st.title("Şiir Formatını Kıta'ya Dönüştürücü Uygulama.")
# 
# path = st.file_uploader("Upload your txt file :", type = ["txt"])
# 
# path = None
# path = st.file_uploader("Upload your txt file :", type ["txt"])
# 
# if path:
#   with open("istiklal.txt", "r", encoding="utf8") as ff :
#     new_lines = ff.readlines()
# 
# counter = 0
# with open("istiklal.txt", "w", encoding = "utf8") as f:
# 
#   for i in lines:
#     counter +=1
#     if counter %4 == 0 :
#       f.write(i + "\n")
#     else :
#       f.write(i)

word = {1 : "1", 2 : "2"}

keys = word.keys()
keys

word_1 = {}

word_1[3] = 1
word_1

word_1[1] = 1
word_1

word_1[3] += 1 #word_1[3] = word_1[3] + 1
word_1[3]

word_1

word_1[3] += 1 #word_1[3] = word_1[3] + 1
word_1

string = "bir berber, bir'e berber."

word_dict = {}

for n in string :
  keys = word_dict.keys()
  if n in keys :
    word_dict[n] += 1
  else :
    word_dict[n] = 1

print(word_dict)

veri = ["a", "b", True, (False, 1), {"1" : 2},[1, 2], {"2" : "two"}, {2, "3"}, "c", 23, 0]

tipler = ["int", "str", "bool", "list", "tuple", "dict", "set"]

{}.fromkeys(tipler, 0)

toplam = {}.fromkeys(tipler, 0)

for i in range(len(veri)) :
  if type(veri[i]) == int: toplam["int"] += 1
  elif type(veri[i]) == str: toplam["str"] += 1
  elif type(veri[i]) == bool: toplam["bool"] += 1
  elif type(veri[i]) == list: toplam["list"] += 1
  elif type(veri[i]) == tuple: toplam["tuple"] += 1
  elif type(veri[i]) == dict: toplam["dict"] += 1
  elif type(veri[i]) == set: toplam["set"] += 1

toplam

import os

os.listdir()

import glob

for file in glob.glob("*.txt"):
  print(file)

import shutil

shutil.copy("fruits_24.txt", "../fruits_24_copy.txt")

def my_factorial(n) :
  if n == 0 : return 1

  else :
    return n * my_factorial(n-1)

my_factorial(3)

x = [([1], [2,3], (4,5,6))]

len(x)

a = []
for i in x:
  for j in i:
    for z in j:
      a.append(z) 
print(a)

[i for i in range(5)]

{z for i in x for j in i for z in j}

xList = "elma armut muz".split()
xList

yList = "selvi vahit ayşe".split()
yList

result = []
for i in xList:
  for j in yList:
    result.append(i + j)
result

[i + j for i in xList for j in yList]

[[i + j] for i in xList for j in yList]

result = []
sayılar = ["bir", "iki", "üç"]
for i in range(5):
  if i % 2 == 0 :
    for j in sayılar:
      result.append(str(i) + " --> " + j)
result

[str(i) + " --> " + j for i in range(5) for j in sayılar if i % 2 == 0]

### Girilen üç sayıdan kaç tanesi tekrarlıyor. Bunu gösteren bir fonksiyon yazalım

equal(4,4,4) # ==> 3
equal(3,4,4) # ==> 2
equal(1,2,3) # ==> 0

num = [5,1,1]

max(num)

max(num, key = num.count)

num.count(5)

num.count(1)

num.count(1)

def equal(a, b, c) :
  numbers = [a, b, c]
  result = numbers.count(max(numbers, key = numbers.count))
  if result > 1 :
    return result
  else :
    return 0

equal(1,1,5)

equal(5,5,5)

def equal(*a) :
  numbers = list(a)
  result = numbers.count(max(numbers, key = numbers.count))
  if result > 1 :
    return result
  else :
    return 0

equal(1,2,3,4,5,5,5,6,7,7)

with open('fruits.csv', 'w', encoding = 'utf-8') as file:
    file.write('no,fruit,amount,\n1,Banana,4 lb,\n2,Orange,5 lb,\n3,Apple,2 lb,\n4,Strawberry,6 lb,\n5,Cherry,3 lb)\n')
with open('fruits.csv', 'r', encoding = 'utf-8') as file:
    print(file.read())

import csv  # loads csv module

with open("fruits.csv", 'r', newline = '', encoding = 'utf-8') as file:
    csv_rows = csv.reader(file)  # reader() function takes each
                                 # row (lines) into a list
    for row in csv_rows:
        print(row)

import pandas as pd

titanic = pd.read_csv("titanic.csv")

titanic

!pip install pandas

titanic[titanic["Sex"] == "female"]

bayanlar = titanic[titanic["Sex"] == "female"]

bayanlar.to_csv("titanic_bayanlar.csv")

titanic.groupby("Sex")["Survived"].mean()

L = ["right 20", "right 30", "left 50", "up 10", "down 20"]

x = y = 0

for i in range(len(L)) :
  if L[i].startswith("r") : x = x + int(L[i].split()[1])
  elif L[i].startswith("l") : x = x - int(L[i].split()[1])
  elif L[i].startswith("u") : y = y + int(L[i].split()[1])
  elif L[i].startswith("d") : y = y - int(L[i].split()[1])
[x, y]

"right 20".split()[1]

print("ahttps://www.google.com".startswith(("http://", "https://", "ahttp")))

print("http://www.google.co.uk".endswith((".com", "co.uk")))

ops = {"+" : (lambda x, y : x+y), "-" : (lambda x, y : x-y), "/" : (lambda x, y : x/y)}

ops

ops["+"] # value sini gösterecek

ops["+"](3, 5)

normal = {"bir" : 11, "iki" : 22}

normal["bir"]

type(normal["bir"])

answer = 44
questions = 'What number am I thinking of? '
print("Let's play the guessing game!")
while True :
  guess = int(input(questions))
  if guess < answer:
    print('Little higher')
  elif guess > answer:
    print('Little lower')
  else: # guess == answer
    print('Are you a MINDREADER!!!')
    break

for i in {'n1' : 'one', 'n2' : 'two'} : print(i)

n = int(input("enter a number between 1-10:"))
for i in range(11):
  print("{}x{} = ".format(n, i),n*i)

print(*('separate'))